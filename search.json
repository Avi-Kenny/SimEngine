[{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"GNU GENERAL PUBLIC LICENSE","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU GENERAL PUBLIC LICENSE","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: assert copyright software, offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU GENERAL PUBLIC LICENSE","text":"License refers version 3 GNU General Public License. Copyright also means copyright-like laws apply kinds works, semiconductor masks. Program refers copyrightable work licensed License. licensee addressed . Licensees recipients may individuals organizations. modify work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called modified version earlier work work based earlier work. covered work means either unmodified Program work based Program. propagate work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. convey work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays Appropriate Legal Notices extent includes convenient prominently visible feature displays appropriate copyright notice, tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU GENERAL PUBLIC LICENSE","text":"source code work means preferred form work making modifications . Object code means non-source form work. Standard Interface means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. System Libraries executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. Major Component, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . Corresponding Source work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU GENERAL PUBLIC LICENSE","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU GENERAL PUBLIC LICENSE","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 keep intact notices. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called aggregate compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. User Product either consumer product, means tangible personal property normally used personal, family, household purposes, anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, normally used refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. Installation Information User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU GENERAL PUBLIC LICENSE","text":"Additional permissions terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered restrictions within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU GENERAL PUBLIC LICENSE","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated provisionally, unless copyright holder explicitly finally terminates license, permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU GENERAL PUBLIC LICENSE","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. entity transaction transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU GENERAL PUBLIC LICENSE","text":"contributor copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s contributor version. contributor’s essential patent claims patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, control includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, patent license express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). grant patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either cause Corresponding Source available, arrange deprive benefit patent license particular work, arrange, manner consistent requirements License, extend patent license downstream recipients. Knowingly relying means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license discriminatory include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license connection copies covered work conveyed (copies made copies), primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU GENERAL PUBLIC LICENSE","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License later version applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU GENERAL PUBLIC LICENSE","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU GENERAL PUBLIC LICENSE","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU GENERAL PUBLIC LICENSE","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee.","code":""},{"path":[]},{"path":"https://avi-kenny.github.io/SimEngine/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"END OF TERMS AND CONDITIONS","what":"How to Apply These Terms to Your New Programs","title":"GNU GENERAL PUBLIC LICENSE","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least copyright line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use box. also get employer (work programmer) school, , sign copyright disclaimer program, necessary. information , apply follow GNU GPL, see http://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read http://www.gnu.org/philosophy/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details."},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to SimEngine","text":"SimEngine open-source R package structuring, maintaining, running, debugging statistical simulations local cluster-based computing environments.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Introduction to SimEngine","text":"goal many statistical simulations test new statistical method performs existing methods. statistical simulations include three basic phases: (1) generate data, (2) run one methods using generated data, (3) compare performance methods. briefly illustrate phases implemented using SimEngine, use example estimating average treatment effect drug context randomized controlled trial (RCT).","code":""},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"load-the-package-and-create-a-simulation-object","dir":"Articles","previous_headings":"Getting started","what":"1) Load the package and create a “simulation object”","title":"Introduction to SimEngine","text":"simulation object (R object class sim_obj) contain data, functions, results related simulation.","code":"library(SimEngine) #> Loading required package: magrittr #> Welcome to SimEngine! Full package documentation can be found at: #>  https://avi-kenny.github.io/SimEngine sim <- new_sim()"},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"code-a-function-to-generate-some-data","dir":"Articles","previous_headings":"Getting started","what":"2) Code a function to generate some data","title":"Introduction to SimEngine","text":"simulations involve one functions create dataset designed mimic real-world data structure. , write function simulates data RCT compare continuous outcome (e.g. blood pressure) treatment group control group. generate data looping set patients, assigning randomly one two groups, generating outcome according simple model.","code":"# Code up the dataset-generating function create_rct_data <- function (num_patients) {   df <- data.frame(     \"patient_id\" = integer(),     \"group\" = character(),     \"outcome\" = double(),     stringsAsFactors = FALSE   )   for (i in 1:num_patients) {     group <- ifelse(sample(c(0,1), size=1)==1, \"treatment\", \"control\")     treatment_effect <- ifelse(group==\"treatment\", -7, 0)     outcome <- rnorm(n=1, mean=130, sd=2) + treatment_effect     df[i,] <- list(i, group, outcome)   }   return (df) }  # Test the function create_rct_data(5) #>   patient_id     group  outcome #> 1          1 treatment 126.7997 #> 2          2 treatment 123.3045 #> 3          3 treatment 124.6935 #> 4          4 treatment 126.2102 #> 5          5   control 128.4514"},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"code-your-methods-or-other-functions","dir":"Articles","previous_headings":"Getting started","what":"3) Code your methods (or other functions)","title":"Introduction to SimEngine","text":"SimEngine, functions declare (load via source) automatically added simulation object simulation runs. example, test two different estimators average treatment effect. simplicity, code single function use type argument specify estimator want use, also write two separate functions. first estimator uses known probability assigned treatment group (0.5), whereas second estimator uses estimate probability based observed data. Don’t worry much mathematical details; important thing methods attempt take dataset generated create_rct_data function return estimate treatment effect, case -7.","code":"# Code up the estimators est_tx_effect <- function(df, type) {   n <- nrow(df)   sum_t <- sum(df$outcome * (df$group==\"treatment\"))   sum_c <- sum(df$outcome * (df$group==\"control\"))   if (type==\"est1\") {     true_prob <- 0.5     return ( sum_t/(n*true_prob) - sum_c/(n*(1-true_prob)) )   } else if (type==\"est2\") {     est_prob <- sum(df$group==\"treatment\") / n     return ( sum_t/(n*est_prob) - sum_c/(n*(1-est_prob)) )   } }  # Test out the estimators df <- create_rct_data(1000) est_tx_effect(df, \"est1\") #> [1] -7.517866 est_tx_effect(df, \"est2\") #> [1] -7.0121"},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"set-the-simulation-levels","dir":"Articles","previous_headings":"Getting started","what":"4) Set the simulation levels","title":"Introduction to SimEngine","text":"Often, want run simulation multiple times (run referred “simulation replicate”), certain things changed. example, perhaps want vary number patients method used estimate average treatment effect. refer things vary “simulation levels”. default, SimEngine run simulation 10 times level combination. , since two methods three values num_patients, six level combinations SimEngine run total 60 simulation replicates. Note make extensive use pipe operators (%>% %<>%) magrittr package; never used pipes, check magrittr documentation.","code":"sim %<>% set_levels(   estimator = c(\"est1\", \"est2\"),   num_patients = c(50, 200, 1000) )"},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"create-a-simulation-script","dir":"Articles","previous_headings":"Getting started","what":"5) Create a simulation script","title":"Introduction to SimEngine","text":"simulation script function runs single simulation replicate returns results. Within script, can reference current simulation level values using variable L. example, first simulation replicate running, L$estimator equal “est1” L$num_patients equal 50. last simulation replicate, L$estimator equal “est2” L$num_patients equal 1,000. script automatically access functions created earlier. script always return list containing key-value pairs, keys character strings values simple data types (numbers, character strings, boolean values). need return complex data types (e.g. lists dataframes), see Advanced usage documentation page. Note example, alternatively coded estimators separate functions called within script using use_method function.","code":"sim %<>% set_script(function() {   df <- create_rct_data(L$num_patients)   est <- est_tx_effect(df, L$estimator)   return (list(     \"est\" = est,     \"mean_t\" = mean(df$outcome[df$group==\"treatment\"]),     \"mean_c\" = mean(df$outcome[df$group==\"control\"])   )) })"},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"set-the-simulation-configuration","dir":"Articles","previous_headings":"Getting started","what":"6) Set the simulation configuration","title":"Introduction to SimEngine","text":"controls options related entire simulation, number simulation replicates run level combination parallelize code. also specify packages simulation needs (instead using library require). See set_config docs info. set num_sim 100, SimEngine run total 600 simulation replicates (100 six level combinations).","code":"sim %<>% set_config(   num_sim = 100,   parallel = TRUE,   n_cores = 2,   packages = c(\"ggplot2\", \"stringr\") ) #>  #> Attaching package: 'ggplot2' #> The following object is masked from 'package:SimEngine': #>  #>     vars"},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"run-the-simulation","dir":"Articles","previous_headings":"Getting started","what":"7) Run the simulation","title":"Introduction to SimEngine","text":"600 replicates run results stored simulation object.","code":"sim %<>% run() #> Done. No errors or warnings detected."},{"path":"https://avi-kenny.github.io/SimEngine/articles/SimEngine.html","id":"view-and-summarize-results","dir":"Articles","previous_headings":"Getting started","what":"8) View and summarize results","title":"Introduction to SimEngine","text":"simulations finished, use summarize function calculate common summary statistics, bias, variance, MSE, coverage. example, see MSE estimator 1 much higher estimator 2 MSE decreases increasing sample size estimators, expected. can also directly access results individual simulation replicates. , sim_uid uniquely identifies single simulation replicate level_id uniquely identifies level combination. rep_id unique within given level combination identifies replicate.","code":"sim %>% summarize(   list(stat=\"bias\", truth=-7, estimate=\"est\"),   list(stat=\"mse\", truth=-7, estimate=\"est\") ) #>   level_id estimator num_patients n_reps      bias_est      MSE_est #> 1        1      est1           50    100  4.4860289136 1.306009e+03 #> 2        2      est2           50    100 -0.0791168183 3.442715e-01 #> 3        3      est1          200    100 -0.5143664983 3.266588e+02 #> 4        4      est2          200    100  0.0009444138 6.286974e-02 #> 5        5      est1         1000    100  0.3806525836 6.336515e+01 #> 6        6      est2         1000    100 -0.0046460236 1.592315e-02 head(sim$results) #>   sim_uid level_id rep_id estimator num_patients     runtime       est   mean_t #> 1       1        1      1      est1           50 0.005410910  33.67652 123.1950 #> 2       7        1      2      est1           50 0.003492832  23.62029 123.1912 #> 3       8        1      3      est1           50 0.005292654 -16.85982 123.3505 #> 4       9        1      4      est1           50 0.003271103  64.38465 123.1887 #> 5      10        1      5      est1           50 0.003563881  24.07422 123.2654 #> 6      11        1      6      est1           50 0.006877184  23.62819 123.3729 #>     mean_c #> 1 130.0353 #> 2 129.9476 #> 3 130.0733 #> 4 129.5790 #> 5 129.5262 #> 6 130.1699"},{"path":"https://avi-kenny.github.io/SimEngine/articles/advanced-usage.html","id":"complex-simulation-levels","dir":"Articles","previous_headings":"","what":"Complex simulation levels","title":"Advanced usage","text":"Often, simulation levels simple, vector sample sizes: However, many instances complex objects needed. cases, instead vector numbers character strings, use named list lists. toy example illustrates . Note list names (\"Beta 1\", \"Beta 2\", \"Normal\") become entries sim$results dataframe.","code":"sim <- new_sim() sim %<>% set_levels(   n = c(200,400,800) ) sim <- new_sim() sim %<>% set_levels(   n = c(10,100),   distribution = list(     \"Beta 1\" = list(type=\"Beta\", params=c(0.3, 0.7)),     \"Beta 2\" = list(type=\"Beta\", params=c(1.5, 0.4)),     \"Normal\" = list(type=\"Normal\", params=c(3.0, 0.2))   ) ) create_data <- function(n, type, params) {   if (type==\"Beta\") {     return(rbeta(n, shape1=params[1], shape2=params[2]))   } else if (type==\"Normal\") {     return(rnorm(n, mean=params[1], sd=params[2]))   } } sim %<>% set_script(function() {   x <- create_data(L$n, L$distribution$type, L$distribution$params)   return(list(\"y\"=mean(x))) }) sim %<>% run() #> Done. No errors or warnings detected. sim$results #>   sim_uid level_id rep_id   n distribution      runtime         y #> 1       1        1      1  10       Beta 1 0.0006468296 0.1788987 #> 2       2        2      1 100       Beta 1 0.0041780472 0.3479514 #> 3       3        3      1  10       Beta 2 0.0003230572 0.8288378 #> 4       4        4      1 100       Beta 2 0.0003070831 0.7368846 #> 5       5        5      1  10       Normal 0.0002980232 3.0895450 #> 6       6        6      1 100       Normal 0.0002813339 2.9929843"},{"path":"https://avi-kenny.github.io/SimEngine/articles/advanced-usage.html","id":"complex-return-data","dir":"Articles","previous_headings":"","what":"Complex return data","title":"Advanced usage","text":"situations, results simulations numeric. However, may want return complex data, matrices, lists, model objects. , include complex return data list special key \".complex\". illustrated toy example , estimate parameters linear regression returns numeric, also return estimated covariance matrix entire model object. running simulation, can examine numeric results directly accessing sim$results using summarize function, usual: However, may also want look complex return data. , use special function get_complex, illustrated :","code":"sim <- new_sim() sim %<>% set_levels(n=c(10, 100, 1000)) create_data <- function(n) {   x <- runif(n)   y <- 3 + 2*x + rnorm(n)   return(data.frame(\"x\"=x, \"y\"=y)) } sim %<>% set_config(num_sim=2) sim %<>% set_script(function() {   dat <- create_data(L$n)   model <- lm(y~x, data=dat)   return (list(     \"beta0_hat\" = model$coefficients[[1]],     \"beta1_hat\" = model$coefficients[[2]],     \".complex\" = list(       \"model\" = model,       \"cov_mtx\" = vcov(model)     )   )) }) sim %<>% run() #> Done. No errors or warnings detected. sim$results #>   sim_uid level_id rep_id    n     runtime beta0_hat beta1_hat #> 1       1        1      1   10 0.003432989  3.268577  1.088350 #> 2       4        1      2   10 0.001028538  1.566930  3.954977 #> 3       2        2      1  100 0.004088640  3.034468  2.188577 #> 4       5        2      2  100 0.001037359  3.210187  1.750124 #> 5       3        3      1 1000 0.001394033  2.949609  2.029394 #> 6       6        3      2 1000 0.001254559  2.970485  2.036566 c5 <- get_complex(sim, sim_uid=5) summary(c5$model) #>  #> Call: #> lm(formula = y ~ x, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.94472 -0.48136  0.08167  0.55277  2.41116  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   3.2102     0.1859  17.269  < 2e-16 *** #> x             1.7501     0.3069   5.702 1.25e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9265 on 98 degrees of freedom #> Multiple R-squared:  0.2491, Adjusted R-squared:  0.2415  #> F-statistic: 32.51 on 1 and 98 DF,  p-value: 1.253e-07 c5$cov_mtx #>             (Intercept)           x #> (Intercept)  0.03455634 -0.04946387 #> x           -0.04946387  0.09420628"},{"path":"https://avi-kenny.github.io/SimEngine/articles/advanced-usage.html","id":"using-the-batch-function","dir":"Articles","previous_headings":"","what":"Using the batch function","title":"Advanced usage","text":"batch function useful want share data objects simulation replicates. Essentially, allows take simulation replicates divide “batches”; replicates given batch share single set objects. common use case simulation involves generating one dataset, analyzing using multiple methods, repeating number times. illustrate use batch using example, first consider following simulation: look “dat_1” column results object (equal first element dat vector created simulation script), see unique dataset created simulation replicate: Suppose instead, want run simulation generate one dataset, analyzing using multiple methods (case corresponding “est_mean” “est_median”), repeating twice. can using batch function, follows: code , changed two things. One, added batch_levels=NULL set_config call; don’t worry now. Second, wrapped code line dat <- create_data(n=100) inside batch function. Whatever code goes inside batch function produce output simulations batch; case, look “dat_1” column results object, can see one dataset created shared batch corresponding sim_uids 1 2: However, situation often complicated. simulation multiple level variables, correspond creating data correspond analyzing data? batch_levels config option comes . easy use; simply specify names level variables used within batch function. example: see achieved wanted - batches created batch contained two replicates, one estimator. also specified return_batch_id=T option set_config results object return batch_id. batch_id variable defines batches; simulations share batch_id. can useful use option ensure using batch function correctly. tips keep mind using batch function: code within batch code block create objects; attempt change delete existing objects, changes may ignored. majority cases, batch function called just , top simulation script. However, can used anywhere script can called multiple times. Never use batch outside simulation script. Although illustrated use batch function create dataset share multiple replicates, can used much , taking sample existing dataset, computing shared nuisance function estimators, performing computationally-intense tasks, . Currently, simulation script uses batch function, update simulation using update_sim (update_sim_on_cluster), function unless removing replicates. may changed future.","code":"sim <- new_sim() create_data <- function(n) { rnorm(n=n, mean=3) } est_mean <- function(dat, type) {   if (type==\"est_mean\") { return(mean(dat)) }   if (type==\"est_median\") { return(median(dat)) } } sim %<>% set_levels(est=c(\"est_mean\",\"est_median\")) sim %<>% set_config(num_sim=3) sim %<>% set_script(function() {   dat <- create_data(n=100)   mu_hat <- est_mean(dat=dat, type=L$est)   return(list(     \"mu_hat\" = round(mu_hat,2),     \"dat_1\" = round(dat[1],2)   )) }) sim %<>% run() #> Done. No errors or warnings detected. sim$results[order(sim$results$rep_id),] #>   sim_uid level_id rep_id        est      runtime mu_hat dat_1 #> 1       1        1      1   est_mean 0.0003561974   2.79  2.34 #> 4       2        2      1 est_median 0.0039846897   3.22  3.68 #> 2       3        1      2   est_mean 0.0003373623   2.96  2.10 #> 5       5        2      2 est_median 0.0003385544   2.77  2.90 #> 3       4        1      3   est_mean 0.0003378391   3.03  0.99 #> 6       6        2      3 est_median 0.0003454685   2.92  4.21 sim <- new_sim() create_data <- function(n) { rnorm(n=n, mean=3) } est_mean <- function(dat, type) {   if (type==\"est_mean\") { return(mean(dat)) }   if (type==\"est_median\") { return(median(dat)) } } sim %<>% set_levels(est=c(\"est_mean\",\"est_median\")) sim %<>% set_config(num_sim=3, batch_levels=NULL) sim %<>% set_script(function() {   batch({     dat <- create_data(n=100)   })   mu_hat <- est_mean(dat=dat, type=L$est)   return(list(     \"mu_hat\" = round(mu_hat,2),     \"dat_1\" = round(dat[1],2)   )) }) sim %<>% run() #> Done. No errors or warnings detected. sim$results[order(sim$results$rep_id),] #>   sim_uid level_id rep_id        est      runtime mu_hat dat_1 #> 1       1        1      1   est_mean 0.0006027222   3.03  3.55 #> 4       2        2      1 est_median 0.0058712959   3.07  3.55 #> 2       3        1      2   est_mean 0.0012826920   2.88  3.81 #> 5       5        2      2 est_median 0.0004057884   2.89  3.81 #> 3       4        1      3   est_mean 0.0004224777   3.05  1.97 #> 6       6        2      3 est_median 0.0004384518   3.12  1.97 sim <- new_sim() create_data <- function(n, mu) { rnorm(n=n, mean=mu) } est_mean <- function(dat, type) {   if (type==\"est_mean\") { return(mean(dat)) }   if (type==\"est_median\") { return(median(dat)) } } sim %<>% set_levels(n=c(10,100), mu=c(3,5), est=c(\"est_mean\",\"est_median\")) sim %<>% set_config(num_sim=2, batch_levels=c(\"n\", \"mu\"), return_batch_id=T) sim %<>% set_script(function() {   batch({     dat <- create_data(n=L$n, mu=L$mu)   })   mu_hat <- est_mean(dat=dat, type=L$est)   return(list(     \"mu_hat\" = round(mu_hat,2),     \"dat_1\" = round(dat[1],2)   )) }) sim %<>% run() #> Done. No errors or warnings detected.  sim$results[order(sim$results$batch_id),] #>    sim_uid level_id rep_id batch_id   n mu        est      runtime mu_hat dat_1 #> 1        1        1      1        1  10  3   est_mean 0.0004780293   3.32  3.48 #> 9        5        5      1        1  10  3 est_median 0.0004351139   3.50  3.48 #> 2        9        1      2        2  10  3   est_mean 0.0004019737   3.23  4.37 #> 10      13        5      2        2  10  3 est_median 0.0031154156   3.22  4.37 #> 3        2        2      1        3 100  3   est_mean 0.0040371418   2.93  2.40 #> 11       6        6      1        3 100  3 est_median 0.0004217625   2.74  2.40 #> 4       10        2      2        4 100  3   est_mean 0.0004119873   2.85  2.61 #> 12      14        6      2        4 100  3 est_median 0.0004367828   2.85  2.61 #> 5        3        3      1        5  10  5   est_mean 0.0004522800   5.17  3.90 #> 13       7        7      1        5  10  5 est_median 0.0004098415   5.06  3.90 #> 6       11        3      2        6  10  5   est_mean 0.0003986359   4.91  6.02 #> 14      15        7      2        6  10  5 est_median 0.0004076958   5.20  6.02 #> 7        4        4      1        7 100  5   est_mean 0.0004327297   5.16  3.75 #> 15       8        8      1        7 100  5 est_median 0.0004029274   5.31  3.75 #> 8       12        4      2        8 100  5   est_mean 0.0004014969   4.88  2.93 #> 16      16        8      2        8 100  5 est_median 0.0004413128   4.79  2.93"},{"path":"https://avi-kenny.github.io/SimEngine/articles/advanced-usage.html","id":"setting-seeds","dir":"Articles","previous_headings":"","what":"Setting seeds","title":"Advanced usage","text":"statistical research, often desirable ability reproduce exact results simulation. Since R code often involves stochastic (random) functions like rnorm sample return different values called multiple times, reproducibility guaranteed. simple R script, calling set.seed function top script ensures code follows produce results whenever script run. However, nuanced strategy needed running simulations. running 100 replicates simulation, typically don’t want replicate return identical results; rather, like replicate different one another, entire set replicates run entire simulation twice row. Luckily, SimEngine manages process , even simulations run parallel. SimEngine uses single “global seed” changes individual seeds simulation replicate; use set_config set change global seed: set seed set_config, SimEngine set random seed automatically can reproduce results later desired. view seed, use vars function:","code":"sim %<>% set_config(seed=123) sim <- new_sim() vars(sim, \"seed\") #> [1] 287577520"},{"path":"https://avi-kenny.github.io/SimEngine/articles/advanced-usage.html","id":"handling-errors-and-warnings","dir":"Articles","previous_headings":"","what":"Handling errors and warnings","title":"Advanced usage","text":"type programming, debugging necessary part coding workflow. simulations, sometimes errors occur affect simulation replicates sometimes errors occur affect replicates. default, simulation run, SimEngine stop error occurs; instead, errors logged stored dataframe along information simulation replicates resulted errors. Examining dataframe typing print(sim$errors) can sometimes help quickly pinpoint issue. demonstrated : output , see code fails simulation replicates use level Sigma=\"s2\" uses invalid covariance matrix. Similarly, simulation involves replicates throw warnings, warnings logged stored dataframe sim$warnings. workflow can useful quickly spot errors, two main drawbacks. First, can frustrating run time-consuming simulation involving hundreds thousands replicates, find end every replicate failed typo. often useful stop entire simulation single error occurred. Second, can sometimes difficult determine exactly caused error without making use advanced debugging tools. situations, use following configuration option: Setting stop_at_error=TRUE stop simulation encounters error. Furthermore, error thrown R usual way, running simulation RStudio, can make use built-debugging tools find fix bug. example, can click “Show Traceback” view entire call stack see function calls led error, can click “Rerun debug” active interactive debugger, reruns code pauses execution error occurred can examine objects function’s environment. Try running code RStudio stop_at_error=TRUE configuration option, clicking “Rerun debug”, typing print(Sigma) console.","code":"sim <- new_sim() sim %<>% set_config(num_sim=2) sim %<>% set_levels(   Sigma = list(     s1 = list(mtx=matrix(c(3,1,1,2), nrow=2)),     s3 = list(mtx=matrix(c(4,3,3,9), nrow=2)),     s2 = list(mtx=matrix(c(1,2,2,1), nrow=2)),     s4 = list(mtx=matrix(c(8,2,2,6), nrow=2))   ) ) sim %<>% set_script(function() {   x <- MASS::mvrnorm(n=1, mu=c(0,0), Sigma=L$Sigma$mtx)   return(list(x1=x[1], x2=x[2])) })  sim %<>% run() #> Done. Errors detected in 25% of simulation replicates. Warnings detected in 0% of simulation replicates.  sim$errors #>   sim_uid level_id rep_id Sigma      runtime                          message #> 1       5        3      1    s2 0.0003669262 'Sigma' is not positive definite #> 2       6        3      2    s2 0.0003540516 'Sigma' is not positive definite #>                                                      call #> 1 MASS::mvrnorm(n = 1, mu = c(0, 0), Sigma = L$Sigma$mtx) #> 2 MASS::mvrnorm(n = 1, mu = c(0, 0), Sigma = L$Sigma$mtx) sim %<>% set_config(stop_at_error=TRUE)"},{"path":"https://avi-kenny.github.io/SimEngine/articles/example_2.html","id":"statistical-appendix","dir":"Articles","previous_headings":"","what":"Statistical appendix","title":"Example 2: Comparing two standard error estimators","text":"notational simplicity, build matrix \\(\\mathbb{X}\\), whose first column 1’s (intercept column) whose second column \\((X_1, \\dots, X_n)^T\\). also define matrix \\[ \\Sigma = \\begin{pmatrix}\\sigma^2_1 &\\dots& 0 \\\\ \\vdots &\\ddots& \\vdots \\\\ 0 & \\dots & \\sigma^2_n\\end{pmatrix}\\] ordinary least squares estimator \\(\\beta\\) \\(\\hat{\\beta} = (\\mathbb{X}^T\\mathbb{X})^{-1}\\mathbb{X}^T\\mathbb{Y}\\). variance estimator, call \\(\\mathbb{V}\\) \\[\\text{Var}(\\hat{\\beta}) = (\\mathbb{X}^T\\mathbb{X})^{-1}\\mathbb{X}^T\\Sigma\\mathbb{X}(\\mathbb{X}^T\\mathbb{X})^{-1}\\] usual estimator \\(\\mathbb{V}\\) model-based standard error \\(s^2(\\mathbb{X}^T\\mathbb{X})^{-1}\\), \\(s^2 = \\frac{\\sum_i (Y_i - (\\hat{\\beta}_0 + \\hat{\\beta}_1X_i))^2}{n-1}\\). However, heteroskedastic model \\(\\sigma^2_i\\) equal, consistent estimator \\(\\mathbb{V}\\)! say, even large samples, generally expect estimator close truth. better estimator setting sandwich standard error, Huber-White standard error, given \\[(\\mathbb{X}^T\\mathbb{X})^{-1}\\mathbb{X}^T\\hat{\\Sigma}\\mathbb{X}(\\mathbb{X}^T\\mathbb{X})^{-1}\\] \\[\\hat{\\Sigma} = \\begin{pmatrix}(Y_1 - (\\hat{\\beta}_0 + \\hat{\\beta}_1X_1))^2  &\\dots& 0 \\\\ \\vdots &\\ddots& \\vdots \\\\ 0 & \\dots & (Y_n - (\\hat{\\beta}_0 + \\hat{\\beta}_1X_n))^2\\end{pmatrix}\\]","code":""},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"what-is-parallelization","dir":"Articles","previous_headings":"","what":"What is parallelization?","title":"Parallelization","text":"Parallelization process speeding computer program dividing independent tasks running tasks simultaneously across multiple computer processors. modern laptops two processors (“cores”), many statisticians access -called cluster computing systems (CCS), can hundreds processing nodes, can multiple cores. Roughly speaking, program can run ten minutes executed single core take just one minute can broken ten separate tasks run time. Therefore, parallelization can result massive gains computing speed done whenever possible. code can parallelized; separate tasks exchange information depend way. However, can still write programs partially parallel, separately compute ten estimates parallel take mean ten estimates. terminology associated parallel computing can confusing - difference node, core, processor? difference job, task, thread? use following definitions: node single computer. node access physical resources, processing cores memory. laptop node. CCS collection multiple nodes. core (processor) electronic component within computer executes code. Many modern laptops one core, node CCS usually multiple cores. task (thread) portion code runs single core. cluster computing system (CCS) type “supercomputer”, usually created managed specialists, specifically designed handle large numbers parallel tasks coming multiple users. job collection tasks part simulation. job array special type job contains number near-identical tasks job scheduler (JS) software runs CCS manages process running jobs job arrays. Slurm Oracle Grid Engine examples job schedulers.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"parallelization-in-simengine","dir":"Articles","previous_headings":"","what":"Parallelization in SimEngine","title":"Parallelization","text":"two modes parallelizing code using SimEngine, refer “local parallelization” “cluster parallelization”. Local parallelization straightforward way parallelize code. statistical simulations involve running multiple replicates simulation, perhaps certain things changing replicates. local parallelization, single simulation replicate assigned single task. Cluster parallelization similar local parallelization, occurs cluster computing system (CCS). simulation replicate assigned single task, tasks submitted job array cluster computing system. SimEngine designed automate much parallelization process possible. give overview parallelization mode . Afterwards, provide tips tricks apply modes.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"local-parallelization","dir":"Articles","previous_headings":"","what":"Local parallelization","title":"Parallelization","text":"mode, specify parallel=TRUE using set_config. SimEngine handles everything else. Note single simulation replicate runs short amount time (e.g. less one second), using local parallelization can actually result decrease total speed. certain amount computational overhead involved setting parallelization engine inside SimEngine. want quick speed comparison, try running code twice, set_config(parallel = TRUE) set_config(parallel = FALSE), run sim %>% vars(\"total_runtime\") time see difference total runtime. exact overhead involved local parallelization differ machines. machine n cores available, SimEngine n-1 cores default. want manually specify number cores use, use n_cores option set_config function:","code":"sim <- new_sim() sim %<>% set_config(parallel = TRUE) sim %<>% set_config(n_cores = 2)"},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"cluster-parallelization","dir":"Articles","previous_headings":"","what":"Cluster parallelization","title":"Parallelization","text":"Parallelizing code using cluster computing system (CCS) complicated, SimEngine built streamline process much possible. diving , important understand basic workflow CCS. CCS supercomputer consists number nodes, may multiple cores. user typically log CCS via SSH SSH client (PuTTY), send files containing computer programs CCS, either using Linux commands using FTP Client (FileZilla). Next, user run programs submitting “jobs” CCS using special program called job scheduler (JS). JS manages process taking jobs running parallel across multiple nodes /multiple cores. process totally unfamiliar , ask manager CCS team basic tutorial. Although multiple ways run code parallel CCS, choose make use job arrays. main SimEngine function used run_on_cluster. Throughout example, use Slurm JS, analogous workflow apply JS software. Suppose written following simulation want run CCS: run code CCS, must wrap run_on_cluster function. use function, must break code three blocks, called first, main, last. code first block run , set simulation object. done, SimEngine save simulation object filesystem CCS. code main block run every simulation replicate, access simulation object created first block. almost cases, code just include single call run, illustrated . Finally, code last block run simulation replicates finished running, SimEngine automatically compiled results simulation object. Use run_on_cluster function follows: Note none actual simulation code changed; just took chunks code placed chunks appropriate slot within run_on_cluster (either first, main, last). Additionally, tell SimEngine job scheduler using, specifying cluster_config argument list. Run js_support() R see list supported JS software; value js_code column value specified cluster_config argument. Even JS supported, can still use SimEngine CCS (see “Tips tricks” ). ’re done yet, though. need give job scheduler instructions run code. Assume R code stored file called my_simulation.R transferred CCS. First, need create simple shell script run my_simulation.R file. use BASH scripting language, can use shell scripting language choice. Create file called run_sim.sh following two lines place directory CCS my_simulation.R file: Finally, use JS submit three jobs. first run first code, second run main code, third run last code. Slurm, type following three commands shell: first line, submit script using sim_run='first' environment variable, tells SimEngine run code first block within run_on_cluster function my_simulation.R. Note running line, Slurm gives us message “Submitted batch job 101”. number 101 called “job ID” uniquely identifies job CCS. second line, submit script using sim_run='main' environment variable tell Slurm run job array “task IDs” 1-20. means 20 cores used, one per task. default, number cores used correspond total number replicates simulation, replicate assigned run core (see “Tips Tricks” section sure many replicates simulation). Also note included option --depend=afterok:101, tells Slurm wait first job finishes starting job array. Change number 101 whatever number Slurm assigned first job. submit command, code main block run replicate. temporary folder called sim_results created filled objects representing results /errors replicate. third line, submit script using sim_run='last' environment variable. , use --depend=afterok:102 make sure code doesn’t run tasks job array finished. job runs, SimEngine compile results main block, run code last block, save simulation object filesystem, delete temporary sim_results folder contents. mentioned , default SimEngine behavior run replicate core. However, can sometimes advantageous run multiple replicates per core (e.g. single replicate short runtime). , need two things. First, specify n_cores option using set_config. Second, change second sbatch command match value used n_cores.","code":"sim <- new_sim() create_data <- function(n) { rnorm(n) } sim %<>% set_script(function() {   data <- create_data(L$n)   return(list(\"x\"=mean(data))) }) sim %<>% set_levels(n=c(100,1000)) sim %<>% set_config(num_sim=10) sim %<>% run() sim %>% summarize() run_on_cluster(    first = {     sim <- new_sim()     create_data <- function(n) { rnorm(n) }     sim %<>% set_script(function() {       data <- create_data(L$n)       return(list(\"x\"=mean(data)))     })     sim %<>% set_levels(n=c(100,1000))     sim %<>% set_config(num_sim=10)   },    main = {     sim %<>% run()   },    last = {     sim %>% summarize()   },    cluster_config = list(js=\"slurm\")  ) #!/bin/bash Rscript my_simulation.R sbatch --export=sim_run='first' run_sim.sh #> Submitted batch job 101 sbatch --export=sim_run='main' --array=1-20 --depend=afterok:101 run_sim.sh #> Submitted batch job 102 sbatch --export=sim_run='last' --depend=afterok:102 run_sim.sh #> Submitted batch job 103 sim %<>% set_config(n_cores = 5) sbatch --export=sim_run='main' --array=1-5 --depend=afterok:101 run_sim.sh #> Submitted batch job 102"},{"path":[]},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"running-locally","dir":"Articles","previous_headings":"Tips and tricks","what":"Running locally","title":"Parallelization","text":"run_on_cluster function programmed can also run locally. means run entire run_on_cluster function computer (rather CCS), code within first, main, last blocks executed. Objects created within three blocks saved, copy simulation object exported environment run_on_cluster called (typically global environment) can examine results, pass functions like summarize, . can useful testing simulations locally sending CCS.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"using-unsupported-job-schedulers","dir":"Articles","previous_headings":"Tips and tricks","what":"Using “unsupported” job schedulers","title":"Parallelization","text":"may case using Job Scheduler SimEngine natively support. case, can still use SimEngine; key identify environment variable JS uses uniquely identify tasks within job array. example, Slurm uses variable \"SLURM_ARRAY_TASK_ID\" Grid Engine uses variable \"SGE_TASK_ID\". identified variable, specify cluster_config block, follows: Alternatively, ’d like job scheduler supported SimEngine, please submit issue SimEngine GitHub page.","code":"run_on_cluster(    first = {...},   main = {...},   last = {...},    cluster_config = list(tid_var=\"SLURM_ARRAY_TASK_ID\")  )"},{"path":"https://avi-kenny.github.io/SimEngine/articles/parallelization.html","id":"using-the-batch-function-on-a-ccs","dir":"Articles","previous_headings":"Tips and tricks","what":"Using the batch function on a CCS","title":"Parallelization","text":"Special caution must taken use batch function within simulation. case, need set n_cores option, rather running one replicate per core. Furthermore, maximum number cores used exceed number batches, since data shared replicates within batch. , extra cores unused. See batch function documentation additional information.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Avi Kenny. Author, maintainer. Charles Wolock. Author.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kenny , Wolock C (2024). SimEngine: Modular Framework Statistical Simulations R. R package version 1.3.0, https://avi-kenny.github.io/SimEngine/.","code":"@Manual{,   title = {SimEngine: A Modular Framework for Statistical Simulations in R},   author = {Avi Kenny and Charles Wolock},   year = {2024},   note = {R package version 1.3.0},   url = {https://avi-kenny.github.io/SimEngine/}, }"},{"path":"https://avi-kenny.github.io/SimEngine/index.html","id":"simengine-","dir":"","previous_headings":"","what":"A Modular Framework for Statistical Simulations in R","title":"A Modular Framework for Statistical Simulations in R","text":"modular framework statistical simulations R","code":""},{"path":"https://avi-kenny.github.io/SimEngine/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Modular Framework for Statistical Simulations in R","text":"SimEngine open-source R package structuring, maintaining, running, debugging statistical simulations local cluster-based computing environments.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Modular Framework for Statistical Simulations in R","text":"latest stable version SimEngine can installed CRAN using install.packages(): current development version can installed using devtools::install_github():","code":"install.packages(\"SimEngine\") devtools::install_github(repo=\"Avi-Kenny/SimEngine\")"},{"path":"https://avi-kenny.github.io/SimEngine/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"A Modular Framework for Statistical Simulations in R","text":"full package documentation can found https://avi-kenny.github.io/SimEngine/.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/index.html","id":"bugs-reports-and-feature-requests","dir":"","previous_headings":"","what":"Bugs reports and feature requests","title":"A Modular Framework for Statistical Simulations in R","text":"submit bug report request new feature, please submit new GitHub Issue.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/SimEngine-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SimEngine: A Modular Framework for Statistical Simulations in R — SimEngine-package","title":"SimEngine: A Modular Framework for Statistical Simulations in R — SimEngine-package","text":"open-source R package structuring, maintaining, running, debugging statistical simulations local cluster-based computing environments.See full documentation https://avi-kenny.github.io/SimEngine/.","code":""},{"path":[]},{"path":"https://avi-kenny.github.io/SimEngine/reference/SimEngine-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SimEngine: A Modular Framework for Statistical Simulations in R — SimEngine-package","text":"Maintainer: Avi Kenny avi.kenny@gmail.com Authors: Charles Wolock cwolock@uw.edu","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a block of code as part of a batch — batch","title":"Run a block of code as part of a batch — batch","text":"function designed used within simulation script     leverage \"replicate batches\". useful want share data     objects simulation replicates. Essentially, allows     take simulation replicates divide \"batches\";     replicates given batch share single set objects.     common use case simulation involves     generating one dataset, analyzing using multiple methods,     repeating number times. See     https://avi-kenny.github.io/SimEngine/advanced-usage/#using--batch-function     thorough overview function used.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a block of code as part of a batch — batch","text":"","code":"batch(code)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a block of code as part of a batch — batch","text":"code block code enclosed curly braces {}; see examples.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a block of code as part of a batch — batch","text":"","code":"sim <- new_sim() create_data <- function(n, mu) { rnorm(n=n, mean=mu) } est_mean <- function(dat, type) {   if (type==\"est_mean\") { return(mean(dat)) }   if (type==\"est_median\") { return(median(dat)) } } sim %<>% set_levels(n=c(10,100), mu=c(3,5), est=c(\"est_mean\",\"est_median\")) sim %<>% set_config(   num_sim = 2,   batch_levels = c(\"n\",\"mu\"),   return_batch_id = TRUE ) sim %<>% set_script(function() {   batch({     dat <- create_data(n=L$n, mu=L$mu)   })   mu_hat <- est_mean(dat=dat, type=L$est)   return(list(     \"mu_hat\" = round(mu_hat,2),     \"dat_1\" = round(dat[1],2)   )) }) sim %<>% run() sim$results[order(sim$results$batch_id),]"},{"path":"https://avi-kenny.github.io/SimEngine/reference/get_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Access internal simulation variables — get_complex","title":"Access internal simulation variables — get_complex","text":"Extract complex simulation data simulation object","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/get_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access internal simulation variables — get_complex","text":"","code":"get_complex(sim, sim_uid)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/get_complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access internal simulation variables — get_complex","text":"sim simulation object class sim_obj, usually created new_sim sim_uid unique identifier single simulation replicate. corresponds sim_uid column sim$results.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/get_complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access internal simulation variables — get_complex","text":"value complex simulation result data corresponding     supplied sim_uid","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/get_complex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access internal simulation variables — get_complex","text":"","code":"sim <- new_sim() create_data <- function(n) {   x <- runif(n)   y <- 3 + 2*x + rnorm(n)   return(data.frame(\"x\"=x, \"y\"=y)) } sim %<>% set_levels(\"n\"=c(10, 100, 1000)) sim %<>% set_config(num_sim=1) sim %<>% set_script(function() {   dat <- create_data(L$n)   model <- lm(y~x, data=dat)   return (list(     \"beta1_hat\" = model$coefficients[[2]],     \".complex\" = model   )) }) sim %<>% run() sim$results %>% print() get_complex(sim, 1) %>% print()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/js_support.html","id":null,"dir":"Reference","previous_headings":"","what":"Display information about currently-supported job schedulers — js_support","title":"Display information about currently-supported job schedulers — js_support","text":"Run function display information job schedulers     currently supported running SimEngine simulations     cluster computing system (CCS).","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/js_support.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display information about currently-supported job schedulers — js_support","text":"","code":"js_support()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/js_support.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display information about currently-supported job schedulers — js_support","text":"","code":"js_support()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/new_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new simulation object — new_sim","title":"Create a new simulation object — new_sim","text":"Create new simulation object. typically first     function called running simulation using SimEngine.     SimEngine functions take simulation object first     argument.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/new_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new simulation object — new_sim","text":"","code":"new_sim()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/new_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new simulation object — new_sim","text":"simulation object, class sim_obj","code":""},{"path":[]},{"path":"https://avi-kenny.github.io/SimEngine/reference/new_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new simulation object — new_sim","text":"","code":"sim <- new_sim() sim"},{"path":"https://avi-kenny.github.io/SimEngine/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the simulation — run","title":"Run the simulation — run","text":"workhorse function SimEngine actually     runs simulation. called functions set     simulation (set_config, set_script, etc.)     called.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the simulation — run","text":"","code":"run(sim)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the simulation — run","text":"sim simulation object class sim_obj, usually created new_sim","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the simulation — run","text":"original simulation object results attached (along     errors warnings). Results stored sim$results,     errors stored sim$errors, warnings stored  sim$warnings.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the simulation — run","text":"","code":"# The following is a toy example of a simulation, illustrating the use of # the run function. sim <- new_sim() create_data <- function(n) { rpois(n, lambda=5) } est_mean <- function(dat, type) {   if (type==\"M\") { return(mean(dat)) }   if (type==\"V\") { return(var(dat)) } } sim %<>% set_levels(n=c(10,100,1000), est=c(\"M\",\"V\")) sim %<>% set_config(num_sim=1) sim %<>% set_script(function() {   dat <- create_data(L$n)   lambda_hat <- est_mean(dat=dat, type=L$est)   return (list(\"lambda_hat\"=lambda_hat)) }) sim %<>% run() sim$results %>% print()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/run_on_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework for running simulations on a cluster computing system — run_on_cluster","title":"Framework for running simulations on a cluster computing system — run_on_cluster","text":"function allows simulations run parallel     cluster computing system (CCS). acts wrapper code     simulation script, organizing code three sections, labeled     \"first\" (code run start simulation, e.g.     setting simulation levels), \"main\" (running simulation script via     run)), \"last\" (usually code process summarize     simulation results). function interacts cluster job scheduler     software (e.g. Slurm Oracle Grid Engine) divide parallel tasks     cluster nodes. See     https://avi-kenny.github.io/SimEngine/parallelization/     detailed overview CCS parallelization works SimEngine.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/run_on_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework for running simulations on a cluster computing system — run_on_cluster","text":"","code":"run_on_cluster(first, main, last, cluster_config)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/run_on_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework for running simulations on a cluster computing system — run_on_cluster","text":"first Code run start simulation. block code enclosed curly braces  creates simulation object. Put everything need simulation object, since global variables declared block available 'main' 'last' code blocks run. main Code run every simulation replicate. block code enclosed curly braces , almost always contain single call run) function. code block access simulation object created 'first' code block, changes made simulation object saved. last Code run simulation replicates run. block code enclosed curly braces  takes simulation object (point contain results) something , display results graph. cluster_config list configuration options. must specify either js (job scheduler using) tid_var (name environment variable task ID stored ). Run js_support() see list job schedulers currently supported. can optionally also specify dir, character string representing path directory; directory serve working directory hold simulation object, temporary SimEngine objects, simulation results (defaults working directory R script contains simulation code).","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/run_on_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework for running simulations on a cluster computing system — run_on_cluster","text":"","code":"if (FALSE) { # The following is a toy simulation that could be run on a cluster computing # environment. It runs 10 replicates of 2 simulation levels as 20 separate # cluster jobs, and then summarizes the results. This function is designed to # be used in conjunction with cluster job scheduler software (e.g. Slurm or # Oracle Grid Engine). We include both the R code as well as sample BASH code # for running the simulation using Oracle Grid Engine.  # This code is saved in a file called my_simulation.R library(SimEngine) run_on_cluster(    first = {     sim <- new_sim()     create_data <- function(n) { rnorm(n) }     sim %<>% set_script(function() {       data <- create_data(L$n)       return(list(\"x\"=mean(data)))     })     sim %<>% set_levels(n=c(100,1000))     sim %<>% set_config(num_sim=10)   },    main = {     sim %<>% run()   },    last = {     sim %>% summarize()   },    cluster_config = list(js=\"ge\")  )  # This code is saved in a file called run_sim.sh # #!/bin/bash # Rscript my_simulation.R  # The following lines of code are run on the cluster head node. # qsub -v sim_run='first' run_sim.sh # qsub -v sim_run='main' -t 1-20 -hold_jid 101 run_sim.sh # qsub -v sim_run='last' -hold_jid 102 run_sim.sh }"},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the simulation configuration — set_config","title":"Modify the simulation configuration — set_config","text":"function sets configuration options simulation.     'packages' argument specified, packages loaded     attached via library set_config called. Multiple     calls set_config overwrite configuration options     specified subsequent calls, leaving others place. can     see current configuration via print(sim), sim     simulation object.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the simulation configuration — set_config","text":"","code":"set_config(   sim,   num_sim = 1000,   parallel = FALSE,   n_cores = NA,   packages = NULL,   stop_at_error = FALSE,   progress_bar = TRUE,   seed = as.integer(1e+09 * runif(1)),   batch_levels = NA,   return_batch_id = FALSE )"},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the simulation configuration — set_config","text":"sim simulation object class sim_obj, usually created new_sim num_sim integer; number simulations conduct level combination parallel Boolean; set TRUE, SimEngine run one simulation per core. set FALSE, code parallelized. See https://avi-kenny.github.io/SimEngine/parallelization/ overview parallelization works SimEngine. option automatically set TRUE simulation run cluster computing system. n_cores integer; determines number cores simulation run using parallelization. Defaults one fewer number available cores. packages character vector packages load attach stop_at_error Boolean; set TRUE, simulation stop encounters error single replicate Useful debugging. progress_bar Boolean; set FALSE, progress bar normally displayed simulation running suppressed. seed integer; seeds allow reproducible simulation results. seed specified, consecutive runs simulation seed lead identical results (normal circumstances). seed set advance user, SimEngine set random seed, can later retrieved using vars function. See details info. batch_levels Either NULL character vector. batch function used within simulation script, contain names simulation levels used within batch function code block. simulation levels used within batch function code block, specify NULL. See documentation batch function. return_batch_id Boolean. set TRUE, batch_id included part simulation results","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the simulation configuration — set_config","text":"original simulation object modified configuration","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify the simulation configuration — set_config","text":"user specifies, example, set_config(seed=4),   seed used twice SimEngine. First, SimEngine executes   set.seed(4) end set_config call. Second,   seed used generate new set seeds, one simulation   replicate. seeds set turn (parallel)   run called. Even seeds used, code reproducible.   example, simulation involves getting current date/time   Sys.time dynamically retrieving external data may produce   different results different runs.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the simulation configuration — set_config","text":"","code":"sim <- new_sim() sim %<>% set_config(   num_sim = 10,   seed = 2112 ) sim"},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Set simulation levels — set_levels","title":"Set simulation levels — set_levels","text":"Set one simulation levels, things vary     simulation replicates.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set simulation levels — set_levels","text":"","code":"set_levels(sim, ..., .keep = NA)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set simulation levels — set_levels","text":"sim simulation object class sim_obj, usually created new_sim ... One key-value pairs representing simulation levels. value can either vector (simple levels) list lists (complex levels). See examples. .keep integer vector specifying level combinations keep; see examples.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set simulation levels — set_levels","text":"original simulation object old set levels replaced     new set","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set simulation levels — set_levels","text":"","code":"# Basic usage is as follows: sim <- new_sim() sim %<>% set_levels(   \"n\" = c(10, 100, 1000),   \"theta\" = c(2, 3) ) sim$levels  # More complex levels can be set using lists: sim <- new_sim() sim %<>% set_levels(   \"n\" = c(10, 100, 1000),   \"theta\" = c(2, 3),   \"method\" = list(     \"spline1\" = list(knots=c(2,4), slopes=c(0.1,0.4)),     \"spline2\" = list(knots=c(1,5), slopes=c(0.2,0.3))   ) ) sim$levels  # If you don't want to run simulations for all level combinations, use the # .keep option. First, set the levels normally. Second, view the # sim$levels_grid dataframe to examine the level combinations and the # associated level_id values. Third, call set_levels again with the .keep # option to specify which levels to keep (via a vector of level_id values). sim <- new_sim() sim %<>% set_levels(alpha=c(1,2,3), beta=c(5,6)) sim$levels_grid #>   level_id alpha beta #> 1        1     1    5 #> 2        2     2    5 #> 3        3     3    5 #> 4        4     1    6 #> 5        5     2    6 #> 6        6     3    6 sim %<>% set_levels(.keep=c(1,2,6)) sim$levels_grid #>   level_id alpha beta #> 1        1     1    5 #> 2        2     2    5 #> 6        6     3    6"},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the ","title":"Set the ","text":"Specify function used \"simulation script\".     simulation script function runs single simulation replicate     returns results.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the ","text":"","code":"set_script(sim, fn)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the ","text":"sim simulation object class sim_obj, usually created new_sim fn function runs single simulation replicate returns results. results must list key-value pairs. Values categorized simple (number, character string, etc.) complex (vectors, dataframes, lists, etc.). Complex data must go inside key called \".complex\" associated value must list (see examples). function body can contain references special object L stores current set simulation levels (see examples). keys must valid R names (see ?make.names). functions used within script must declared set_script called.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the ","text":"original simulation object new \"simulation script\"     function added.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/set_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the ","text":"","code":"# The following is a toy example of a simulation, illustrating the use of # the set_script function. sim <- new_sim() create_data <- function(n) { rpois(n, lambda=5) } est_mean <- function(dat, type) {   if (type==\"M\") { return(mean(dat)) }   if (type==\"V\") { return(var(dat)) } } sim %<>% set_levels(n=c(10,100,1000), est=c(\"M\",\"V\")) sim %<>% set_config(num_sim=1) sim %<>% set_script(function() {   dat <- create_data(L$n)   lambda_hat <- est_mean(dat=dat, type=L$est)   return (list(\"lambda_hat\"=lambda_hat)) }) sim %<>% run() sim$results  # If you need to return complex result data (vectors, dataframes, lists, # etc.), use the construct \".complex\"=list(). sim <- new_sim() sim %<>% set_levels(n=c(4,9)) sim %<>% set_config(num_sim=1) sim %<>% set_script(function() {   dat <- rnorm(L$n)   mtx <- matrix(dat, nrow=sqrt(length(dat)))   return (list(     \"mean\" = mean(dat),     \"det\" = det(mtx),     \".complex\" = list(dat=dat, mtx=mtx)   )) }) sim %<>% run()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize simulation results — summarize","title":"Summarize simulation results — summarize","text":"function calculates summary statistics simulation results,     including descriptive statistics (e.g. measures     center spread) inferential statistics (e.g. bias confidence interval     coverage). summary statistics calculated simulation replicates     within single simulation level.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize simulation results — summarize","text":"","code":"summarize(sim, ..., mc_se = FALSE)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize simulation results — summarize","text":"sim simulation object class sim_obj, usually created new_sim ... One lists, separated commas, specifying desired summaries sim     simulation object. See examples. list must stat item, specifies type summary statistic     calculated. na.rm item indicates whether exclude NA values performing calculation (    default FALSE). stat options name item optional,     provided, name formed type summary column summary     performed. Additional required items detailed stat type. list(stat=\"mean\", x=\"col_1\", name=\"mean_col\") computes     mean column sim$results$col_1 level combination     creates summary column named \"mean_col\". single-column     summary statistics (see next items) work analogously. name     optional. list(stat=\"median\", ...) computes median. list(stat=\"var\", ...) computes variance. list(stat=\"sd\", ...) computes standard deviation. list(stat=\"mad\", ...) computes mean absolute deviation. list(stat=\"iqr\", ...) computes interquartile range. list(stat=\"min\", ...) computes minimum. list(stat=\"max\", ...) computes maximum. list(stat=\"is_na\", ...) computes number NA values. list(stat=\"correlation\", x=\"col_1\", y=\"col_2\",     name=\"cor_12\") computes (Pearson's) correlation coefficient     sim$results$col_1 sim$results$col_2 level     combination creates summary column named \"cor_12\". list(stat=\"covariance\", x=\"col_1\", y=\"col_2\",     name=\"cov_12\") computes covariance sim$results$col_1     sim$results$col_2 level combination creates     summary column named \"cov_12\". list(stat=\"quantile\", x=\"col_1\", prob=0.8, name=\"q_col_1\")     computes 0.8 quantile column sim$results$col_1 creates     summary column named \"q_col_1\". prob can number     [0,1]. list(stat=\"bias\", estimate=\"est\", truth=5,     name=\"bias_est\") computes absolute bias estimator     corresponding column \"sim$results$est\", relative true     value given truth, creates summary column named     \"bias_est\". name optional. See Details. list(stat=\"bias_pct\", estimate=\"est\", truth=5,     name=\"bias_est\") computes percent bias estimator     corresponding column \"sim$results$est\", relative true     value given truth, creates summary column named     \"bias_pct_est\". name optional. See Details. list(stat=\"mse\", estimate=\"est\", truth=5,     name=\"mse_est\") computes mean squared error estimator     corresponding column \"sim$results$est\", relative true     value given truth, creates summary column named     \"mse_est\". name optional. See Details. list(stat=\"mae\", estimate=\"est\", truth=5,     name=\"mae_est\") computes mean absolute error estimator     corresponding column \"sim$results$est\", relative true     value given truth, creates summary column named     \"mae_est\". name optional. See Details. list(stat=\"coverage\", estimate=\"est\", se=\"se_est\",     truth=5, name=\"cov_est\")     list(stat=\"coverage\", lower=\"est_l\", upper=\"est_u\",     truth=5, name=\"cov_est\") computes confidence interval coverage.     first form, estimate gives name variable     sim$results corresponding estimator interest     se gives name variable containing standard error     estimator interest. second form, lower gives     name variable containing confidence interval lower bound     upper gives name confidence interval upper bound.     cases, truth true value (see Details),     summary column named \"cov_est\" created. mc_se logical argument indicating whether compute Monte Carlo standard error associated confidence interval inferential summary statistics.  applies bias, bias_pct, mse, mae, coverage summary statistics.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize simulation results — summarize","text":"data frame containing result specified summary function column,     simulation levels. column n_reps returns number successful simulation replicates     within level.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/summarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize simulation results — summarize","text":"inferential summaries three ways specify truth: (1) single number,     meaning estimand across simulation replicates levels, (2) numeric vector     length number rows sim$results, (3) name variable sim$results     containing estimand interest. two ways specify confidence interval bounds coverage. first provide     estimate associated se (standard error). variables     sim$results. function constructs 95% Wald-type confidence interval form     (estimate-1.96*se, estimate+1.96*se). alternative provide     lower upper bounds, also variables sim$results. case,     confidence interval (lower, upper). coverage proportion simulation     replicates given level combination truth lies within interval.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/summarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize simulation results — summarize","text":"","code":"# The following is a toy example of a simulation, illustrating the use of # the summarize function. sim <- new_sim() create_data <- function(n) { rpois(n, lambda=5) } est_mean <- function(dat, type) {   if (type==\"M\") { return(mean(dat)) }   if (type==\"V\") { return(var(dat)) } } sim %<>% set_levels(n=c(10,100,1000), est=c(\"M\",\"V\")) sim %<>% set_config(num_sim=5) sim %<>% set_script(function() {   dat <- create_data(L$n)   lambda_hat <- est_mean(dat=dat, type=L$est)   return (list(\"lambda_hat\"=lambda_hat)) }) sim %<>% run() sim %>% summarize(   list(stat = \"mean\", name=\"mean_lambda_hat\", x=\"lambda_hat\"),   list(stat = \"mse\", name=\"lambda_mse\", estimate=\"lambda_hat\", truth=5) )"},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a simulation — update_sim","title":"Update a simulation — update_sim","text":"function updates previously run simulation.    simulation run, can alter levels    resulting object class sim_obj using set_levels,    change configuration (including number simulation    replicates) using set_config. Executing update_sim    simulation object run added levels/replicates, without    repeating anything already run.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a simulation — update_sim","text":"","code":"update_sim(sim, keep_errors = T)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a simulation — update_sim","text":"sim simulation object class sim_obj, usually created new_sim, already run run function keep_errors logical (TRUE default); TRUE, try re-run simulation reps results errors previously; FALSE, attempt run reps ","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a simulation — update_sim","text":"original simulation object additional simulation replicates     results errors","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a simulation — update_sim","text":"possible add new level variables, new levels   existing variables. , best practice include   potential level variables initially running simulation, even   contain single level. way, additional levels can   added later.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a simulation — update_sim","text":"","code":"sim <- new_sim() create_data <- function(n) { rpois(n, lambda=5) } est_mean <- function(dat, type) {   if (type==\"M\") { return(mean(dat)) }   if (type==\"V\") { return(var(dat)) } } sim %<>% set_levels(n=c(10,100), est=\"M\") sim %<>% set_config(num_sim=10) sim %<>% set_script(function() {   dat <- create_data(L$n)   lambda_hat <- est_mean(dat=dat, type=L$est)   return (list(\"lambda_hat\"=lambda_hat)) }) sim %<>% run() sim %<>% set_levels(n=c(10,100,1000), est=c(\"M\",\"V\")) sim %<>% set_config(num_sim=5) sim %<>% update_sim()"},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim_on_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework for updating simulations on a cluster computing system — update_sim_on_cluster","title":"Framework for updating simulations on a cluster computing system — update_sim_on_cluster","text":"function serves scaffold updating previously-run     parallel cluster computing system. Like     run_on_cluster, acts wrapper code     simulation script, organizing code three sections, labeled     \"first\" (code run start simulation, e.g.     setting simulation levels), \"main\" (simulation script, run     repeatedly), \"last\" (code combine summarize simulation     results). function interacts cluster job scheduler software     (e.g. Slurm Oracle Grid Engine) divide parallel tasks cluster     nodes. See https://avi-kenny.github.io/SimEngine/parallelization/     overview cluster parallelization works SimEngine.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim_on_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework for updating simulations on a cluster computing system — update_sim_on_cluster","text":"","code":"update_sim_on_cluster(first, main, last, cluster_config, keep_errors = T)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim_on_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework for updating simulations on a cluster computing system — update_sim_on_cluster","text":"first Code run executing additional simulation replicates. example, include altering simulation levels changing nsim. block code, enclosed curly braces , must first read existing simulation object make alterations . Global variables declared block available 'main' 'last' code blocks run. main Code run every simulation replicate. block code enclosed curly braces  includes call update_sim. code block access simulation object read 'first' code block, changes made simulation object saved. last Code run additional simulation replicates run. block code enclosed curly braces  takes simulation object (point contain old new results) something , display results graph. cluster_config list configuration options. must specify either js (job scheduler using) tid_var (name environment variable task ID stored ). Run js_support() see list job schedulers currently supported. can optionally also specify dir, character string representing path directory; directory serve working directory hold simulation object, temporary SimEngine objects, simulation results (defaults working directory R script contains simulation code). keep_errors logical (TRUE default); TRUE, try re-run simulation reps results errors previously; FALSE, attempt run reps ","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/update_sim_on_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework for updating simulations on a cluster computing system — update_sim_on_cluster","text":"","code":"if (FALSE) { # The following code creates, runs, and subsequently updates a toy simulation # on a cluster computing environment. We include both the R code as well as # sample BASH code for running the simulation using Oracle Grid Engine.  # This code is saved in a file called my_simulation.R library(SimEngine) run_on_cluster(    first = {     sim <- new_sim()     create_data <- function(n) { rnorm(n) }     sim %<>% set_script(function() {       data <- create_data(L$n)       return(list(\"x\"=mean(data)))     })     sim %<>% set_levels(n=c(100,1000))     sim %<>% set_config(num_sim=10)   },    main = {     sim %<>% run()   },    last = {     sim %>% summarize()   },    cluster_config = list(js=\"ge\")  )  # This code is saved in a file called run_sim.sh # #!/bin/bash # Rscript my_simulation.R  # The following lines of code are run on the cluster head node. # qsub -v sim_run='first' run_sim.sh # qsub -v sim_run='main' -t 1-20 -hold_jid 101 run_sim.sh # qsub -v sim_run='last' -hold_jid 102 run_sim.sh  # This code is saved in a file called update_my_simulation.R. Note that it # reads in the simulation object created above, which is saved in a file # called \"sim.rds\". library(SimEngine) update_sim_on_cluster(    first = {     sim <- readRDS(\"sim.rds\")     sim %<>% set_levels(n = c(100,500,1000))   },    main = {     sim %<>% update_sim()   },    last = {     sim %>% summarize()   },    cluster_config = list(js=\"ge\")  )  # This code is saved in a file called update_sim.sh # #!/bin/bash # Rscript update_my_simulation.R  # The following lines of code are run on the cluster head node. Note that # only 10 new replicates are run, since 20 of 30 simulation replicates were # run in the original call to run_on_cluster. # qsub -v sim_run='first' update_sim.sh # qsub -v sim_run='main' -t 1-10 -hold_jid 104 update_sim.sh # qsub -v sim_run='last' -hold_jid 105 update_sim.sh }"},{"path":"https://avi-kenny.github.io/SimEngine/reference/use_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a method — use_method","title":"Use a method — use_method","text":"function calls specified method, passing along     arguments specified args. typically     used conjunction special object L dynamically run methods     included simulation levels. function wrapper     around .call used similar manner. See examples.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/use_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a method — use_method","text":"","code":"use_method(method, args = list())"},{"path":"https://avi-kenny.github.io/SimEngine/reference/use_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a method — use_method","text":"method character string naming function declared loaded via source. args list arguments passed onto method","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/use_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a method — use_method","text":"result call method","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/use_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a method — use_method","text":"","code":"# The following is a toy example of a simulation, illustrating the use of # the use_method function. sim <- new_sim() create_data <- function(n) { rpois(n, lambda=5) } est_mean_1 <- function(dat) { mean(dat) } est_mean_2 <- function(dat) { var(dat) } sim %<>% set_levels(   \"n\" = c(10, 100, 1000),   \"estimator\" = c(\"est_mean_1\", \"est_mean_2\") ) sim %<>% set_config(num_sim=1) sim %<>% set_script(function() {   dat <- create_data(L$n)   lambda_hat <- use_method(L$estimator, list(dat))   return (list(\"lambda_hat\"=lambda_hat)) }) sim %<>% run() sim$results"},{"path":"https://avi-kenny.github.io/SimEngine/reference/vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Access internal simulation variables — vars","title":"Access internal simulation variables — vars","text":"\"getter function\" returns value     internal simulation variable. change variables     manually.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access internal simulation variables — vars","text":"","code":"vars(sim, var)"},{"path":"https://avi-kenny.github.io/SimEngine/reference/vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access internal simulation variables — vars","text":"sim simulation object class sim_obj, usually created new_sim var argument omitted, vars return list     containing available internal variables. argument     provided, equal one following character strings: seed: simulation seed; see set_config     info seeds. env: reference environment individual     simulation replicates run (advanced) num_sim_total: total number simulation replicates     simulation. particularly useful simulation     run parallel cluster computing system job array     user needs know range task IDs. run_state: character string describing \"run state\"     simulation. equal one following: \"pre run\" (    simulation yet run), \"run, errors\" (simulation ran     errors), \"run, errors\" (simulation ran     errors), \"run, errors\" (simulation ran replicates     errors).","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access internal simulation variables — vars","text":"value internal variable.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access internal simulation variables — vars","text":"can also access simulation variables sim$vars,     sim simulation object (see examples).","code":""},{"path":"https://avi-kenny.github.io/SimEngine/reference/vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access internal simulation variables — vars","text":"","code":"sim <- new_sim() sim %<>% set_levels(   \"n\" = c(10, 100, 1000) ) sim %<>% set_config(num_sim=10) vars(sim, \"num_sim_total\") %>% print() sim$vars$num_sim_total %>% print() vars(sim) %>% print()"},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"simengine-130","dir":"Changelog","previous_headings":"","what":"SimEngine 1.3.0","title":"SimEngine 1.3.0","text":"CRAN release: 2023-10-26","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"major-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"SimEngine 1.3.0","text":"Added option summarize() function calculate Monte Carlo standard errors confidence intervals inferential summary statistics. summary statistics meant estimate population quantity (e.g., bias estimator), Monte Carlo standard error quantifies variability due running finite number simulation replicates.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"minor-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"SimEngine 1.3.0","text":"Fixed bug associated function scoping; see https://github.com/Avi-Kenny/SimEngine/issues/92.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"simengine-120","dir":"Changelog","previous_headings":"","what":"SimEngine 1.2.0","title":"SimEngine 1.2.0","text":"CRAN release: 2023-02-27","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"major-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"SimEngine 1.2.0","text":"Added batch() function, allows sharing data objects simulation replicates. Essentially, allows take simulation replicates divide “batches”; replicates given batch share single set objects. common use case simulation involves generating one dataset, analyzing using multiple methods, repeating number times. See documentation info. Overhauled simplified interface summarize() function added several summary metrics (correlation, covariance, n_reps); see documentation info. Users can now run multiple simulation replicates per core running code CCS using run_on_cluster().","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"minor-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"SimEngine 1.2.0","text":"Added results call sessionInfo() vars(). Changed sim_id rep_id avoid confusion sim_uid. Removed option user specify subset sim_uids. Removed keep_extra option update_sim() update_sim_on_cluster(). Removed .add option set_levels(). Added constraint set_levels() prevent changing level variables initially set. Fixed bug associated functions NULL environment (e.g. .integer). Fixed bugs previously prevented users running simulation levels. Various minor bug fixes.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"simengine-110","dir":"Changelog","previous_headings":"","what":"SimEngine 1.1.0","title":"SimEngine 1.1.0","text":"CRAN release: 2022-04-27","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"major-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"SimEngine 1.1.0","text":"Removed add_* functions, ultimately deemed unnecessary workflow: add_creator(), add_method(), add_constants(). Instead, functions declared parent frame new_sim() call automatically added simulation object. now recommended simulation constants stored referenced way levels; see “Advanced Usage” SimEngine website (https://avi-kenny.github.io/SimEngine/).","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"minor-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"SimEngine 1.1.0","text":"Fixed bug related use closures added via add_method(). Added info documentation properly load packages via set_config() (since source confusion among users). Fixed minor issues documentation.","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"simengine-100","dir":"Changelog","previous_headings":"","what":"SimEngine 1.0.0","title":"SimEngine 1.0.0","text":"CRAN release: 2021-09-27","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"major-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"SimEngine 1.0.0","text":"Initial package release","code":""},{"path":"https://avi-kenny.github.io/SimEngine/news/index.html","id":"minor-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"SimEngine 1.0.0","text":"None","code":""}]
